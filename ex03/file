
#include "AForm.hpp"

AForm::AForm() : name("default"), formSigned(false), gradeToSign(150), gradeToExecute(150) {
	std::cout << "Form " << name << " created" << std::endl;
}

AForm::AForm(std::string const &name, int gradeToSign, int gradeToExecute) : name(name), formSigned(false), gradeToSign(gradeToSign), gradeToExecute(gradeToExecute) {
	if (gradeToSign < 1 || gradeToExecute < 1)
		throw AForm::GradeTooHighException();
	if (gradeToSign > 150 || gradeToExecute > 150)
		throw AForm::GradeTooLowException();
	std::cout << "Form " << name << " created" << std::endl;
}

AForm::AForm(AForm const &form) : name(form.name), formSigned(form.formSigned), gradeToSign(form.gradeToSign), gradeToExecute(form.gradeToExecute) {
	std::cout << "Form " << name << " created" << std::endl;
}

AForm::~AForm() {
	std::cout << "Form " << name << " destroyed" << std::endl;
}

AForm &AForm::operator=(AForm const &form) {
	if (this == &form)
		return *this;
	formSigned = form.formSigned;
	return *this;
}

std::string const &AForm::getName() const {
	return name;
}

bool AForm::getFormSigned() const {
	return formSigned;
}

int AForm::getGradeToSign() const {
	return gradeToSign;
}

int AForm::getGradeToExecute() const {
	return gradeToExecute;
}

void AForm::beSigned(const Bureaucrat& bureaucrat) {
	if (this->formSigned)
	{
		std::cout << "Form " << this->name << " is already signed by " << bureaucrat.getName() << std::endl;
		return;
	}
    if (bureaucrat.getGrade() > this->gradeToSign) {
        throw GradeTooLowException();
    }
    this->formSigned = true;
}

std::ostream &operator<<(std::ostream &out, AForm const &form) {
	out << "Form " << form.getName() << " is ";
	if (!form.getFormSigned())
		out << "not ";
	out << "signed";
	return out;
}

void AForm::execute(const Bureaucrat& executor) const {
	if (!this->formSigned) {
		throw FormNotSignedException();
	}
	if (executor.getGrade() > this->gradeToExecute) {
		throw GradeTooLowException();
	}
}

#ifndef FORM_HPP
#define FORM_HPP

#include <iostream>
#include <stdexcept>
#include "Bureaucrat.hpp"

class Bureaucrat;

class AForm
{
	private:
		std::string const name;
		bool formSigned;
		int const gradeToSign;
		int const gradeToExecute;

	public:
		AForm();
		AForm(std::string const &name, int gradeToSign, int gradeToExecute);
		AForm(AForm const &form);
		virtual ~AForm();
		
		AForm &operator=(AForm const &form);

		std::string const &getName() const;
		bool getFormSigned() const;
		int getGradeToSign() const;
		int getGradeToExecute() const;
		void beSigned(Bureaucrat const &bureaucrat);
		virtual void execute(Bureaucrat const &executor) const = 0;

		class GradeTooHighException : public std::exception {
		public:
			const char *what() const throw() {
				return "Grade too high";
			}
		};

		class GradeTooLowException : public std::exception {
		public:
			const char *what() const throw() {
				return "Grade too low";
			}
		};

		class FormNotSignedException : public std::exception {
		public:
			const char *what() const throw() {
				return "Form not signed";
			}
		};
};

std::ostream &operator<<(std::ostream &out, AForm const &form);

#endif
#include "Bureaucrat.hpp"

Bureaucrat::Bureaucrat() : name("default"), grade(150) {
	std::cout << "Bureaucrat " << this->name << " created" << std::endl;
}

Bureaucrat::Bureaucrat(Bureaucrat const &bureaucrat) : name(bureaucrat.name), grade(bureaucrat.grade) {
	std::cout << "Bureaucrat " << this->name << " created" << std::endl;
}

Bureaucrat::~Bureaucrat() {
	std::cout << "Bureaucrat " << this->name << " destroyed" << std::endl;
}

Bureaucrat &Bureaucrat::operator=(Bureaucrat const &bureaucrat) {
	if (this == &bureaucrat)
		return *this;
	this->grade = bureaucrat.grade;
	return *this;
}

void Bureaucrat::signForm(AForm& form) {
    try {
        form.beSigned(*this);
        std::cout << name << " signed " << form.getName() << std::endl;
    } catch (const AForm::GradeTooLowException& e) {
        std::cout << name << " couldn’t sign " << form.getName() << " because " << e.what() << std::endl;
    }
}

Bureaucrat::Bureaucrat(std::string const &name, int grade) : name(name) {
	if (grade < 1)
		throw Bureaucrat::GradeTooHighException();
	if (grade > 150)
		throw Bureaucrat::GradeTooLowException();
	this->grade = grade;
}

std::string const &Bureaucrat::getName() const {
	return this->name;
}

int Bureaucrat::getGrade() const {
	return this->grade;
}

void Bureaucrat::incrementGrade() {
	if (this->grade == 1)
		throw Bureaucrat::GradeTooHighException();
	this->grade--;
}

void Bureaucrat::decrementGrade() {
	if (this->grade == 150)
		throw Bureaucrat::GradeTooLowException();
	this->grade++;
}

void Bureaucrat::executeForm(AForm const &form) {
	try {
		form.execute(*this);
		std::cout << name << " executes " << form.getName() << std::endl;
	} catch (const AForm::GradeTooLowException& e) {
		std::cout << name << " couldn’t execute " << form.getName() << " because " << e.what() << std::endl;
	} catch (const AForm::FormNotSignedException& e) {
		std::cout << name << " couldn’t execute " << form.getName() << " because " << e.what() << std::endl;
	}
}

std::ostream &operator<<(std::ostream &os, Bureaucrat const &bureaucrat) {
	os << bureaucrat.getName() << ", bureaucrat grade " << bureaucrat.getGrade();
	return os;
}

#ifndef BUREAUCRAT_HPP
#define BUREAUCRAT_HPP

#include <iostream>
#include <stdexcept>
#include "AForm.hpp"

class AForm;

class Bureaucrat
{
	private:
		std::string const name;
		int grade;

	public:
		Bureaucrat();
		Bureaucrat(std::string const &name, int grade);
		Bureaucrat(Bureaucrat const &bureaucrat);
		~Bureaucrat();
		
		Bureaucrat &operator=(Bureaucrat const &bureaucrat);

		std::string const &getName() const;
		int getGrade() const;
		void incrementGrade();
		void decrementGrade();
		void signForm(AForm& form);
		void executeForm(AForm const &form);
		class GradeTooHighException : public std::exception {
			const char *what() const throw() {
				return "Grade too high";
			}
		};

		class GradeTooLowException : public std::exception {
			const char *what() const throw() {
				return "Grade too low";
			}
		};

};

std::ostream &operator<<(std::ostream &os, Bureaucrat const &bureaucrat);

#endif
#include "Intern.hpp"

Intern::Intern()
{
	this->functions[0] = &Intern::createPresidentialPardonForm;
	this->functions[1] = &Intern::createRobotomyRequestForm;
	this->functions[2] = &Intern::createShrubberyCreationForm;
}

Intern::Intern(Intern const &intern)
{
	*this = intern;
}

Intern::~Intern()
{
}

Intern &Intern::operator=(Intern const &intern)
{
	(void)intern;
	return (*this);
}

AForm *Intern::makeForm(std::string const &formName, std::string const &target)
{
	for (int i = 0; i < 3; i++)
	{
		if (formName == "PresidentialPardonForm" && i == 0)
			return ((this->*functions[i])(target));
		else if (formName == "RobotomyRequestForm" && i == 1)
			return ((this->*functions[i])(target));
		else if (formName == "ShrubberyCreationForm" && i == 2)
			return ((this->*functions[i])(target));
	}
	throw FormNotFoundException();
}

AForm *Intern::createPresidentialPardonForm(std::string const &target)
{
	return (new PresidentialPardonForm(target));
}

AForm *Intern::createRobotomyRequestForm(std::string const &target)
{
	return (new RobotomyRequestForm(target));
}

AForm *Intern::createShrubberyCreationForm(std::string const &target)
{
	return (new ShrubberyCreationForm(target));
}

#ifndef INTERN_HPP
#define INTERN_HPP

#include "AForm.hpp"
#include <string>
#include <iostream>
#include <stdexcept>
#include "PresidentialPardonForm.hpp"
#include "RobotomyRequestForm.hpp"
#include "ShrubberyCreationForm.hpp"
#include "Bureaucrat.hpp"

class Intern
{
	private :
		typedef AForm* (Intern::*func)(std::string const &target);
		func functions[3];
		AForm *createPresidentialPardonForm(std::string const &target);
		AForm *createRobotomyRequestForm(std::string const &target);
		AForm *createShrubberyCreationForm(std::string const &target);

	public :
		Intern();
		Intern(Intern const &intern);
		~Intern();
		Intern &operator=(Intern const &intern);
		AForm *makeForm(std::string const &formName, std::string const &target);
		class FormNotFoundException : public std::exception {
		public:
			const char *what() const throw() {
				return "Form not found";
			}
		};

};

#endif // !



#include "Bureaucrat.hpp"
#include "ShrubberyCreationForm.hpp"
#include "RobotomyRequestForm.hpp"
#include "PresidentialPardonForm.hpp"
#include "Intern.hpp"

int main() {
    try {
        // Create bureaucrats
        Bureaucrat boss("Boss", 1);
        Bureaucrat intern("Intern", 150);

        // Create an Intern
        Intern someRandomIntern;

        // Intern creates forms dynamically
        AForm* shrubForm = someRandomIntern.makeForm("shrubbery creation", "home");
        AForm* robotForm = someRandomIntern.makeForm("robotomy request", "employee");
        AForm* pardonForm = someRandomIntern.makeForm("presidential pardon", "criminal");

        // Print initial state of bureaucrats
        std::cout << boss << std::endl;
        std::cout << intern << std::endl;

        // Attempt to sign forms
        boss.signForm(*shrubForm);
        boss.signForm(*robotForm);
        boss.signForm(*pardonForm);

        // Execute forms
        std::cout << "Attempting to execute forms:" << std::endl;
        try {
            intern.executeForm(*shrubForm);  // Should fail due to low grade
            boss.executeForm(*shrubForm);    // Should succeed and create a file
        } catch (const std::exception& e) {
            std::cerr << "Execution error: " << e.what() << std::endl;
        }

        try {
            boss.executeForm(*robotForm);  // Should output a robotomization message
        } catch (const std::exception& e) {
            std::cerr << "Execution error: " << e.what() << std::endl;
        }

        try {
            boss.executeForm(*pardonForm);  // Should pardon the criminal
        } catch (const std::exception& e) {
            std::cerr << "Execution error: " << e.what() << std::endl;
        }

        // Cleanup dynamically created forms
        delete shrubForm;
        delete robotForm;
        delete pardonForm;

    } catch (const std::exception& e) {
        std::cerr << "Caught an exception: " << e.what() << std::endl;
    }

    return 0;
}
#  |  |  ___ \    \  |         |
#  |  |     ) |  |\/ |   _  |  |  /   _ 
# ___ __|  __/   |   |  (   |    <    __/ 
#    _|  _____| _|  _| \__,_| _|\_\ \___|
#                              by jcluzet
################################################################################
#                                     CONFIG                                   #
################################################################################

NAME        := interm
CC         := c++
FLAGS    := -Wall -Wextra -Werror -std=c++98
 
################################################################################
#                                 PROGRAM'S SRCS                               #
################################################################################

SRCS        :=      AForm.cpp \
                          Bureaucrat.cpp \
                          PresidentialPardonForm.cpp \
                          RobotomyRequestForm.cpp \
                          ShrubberyCreationForm.cpp \
                          main.cpp \
                          Intern.cpp \
                          
OBJS        := ${SRCS:.cpp=.o}

.cpp.o:
	${CC} ${FLAGS} -c $< -o ${<:.cpp=.o}

################################################################################
#                                  Makefile  objs                              #
################################################################################


CLR_RMV		:= \033[0m
RED		    := \033[1;31m
GREEN		:= \033[1;32m
YELLOW		:= \033[1;33m
BLUE		:= \033[1;34m
CYAN 		:= \033[1;36m
RM		    := rm -f

${NAME}:	${OBJS}
			@echo "$(GREEN)Compilation ${CLR_RMV}of ${YELLOW}$(NAME) ${CLR_RMV}..."
			${CC} ${FLAGS} -o ${NAME} ${OBJS}
			@echo "$(GREEN)$(NAME) created[0m ✔️"

all:		${NAME}

bonus:		all

clean:
			@ ${RM} *.o */*.o */*/*.o
			@ echo "$(RED)Deleting $(CYAN)$(NAME) $(CLR_RMV)objs ✔️"

fclean:		clean
			@ ${RM} ${NAME}
			@ echo "$(RED)Deleting $(CYAN)$(NAME) $(CLR_RMV)binary ✔️"

re:			fclean all

.PHONY:		all clean fclean re




#include "PresidentialPardonForm.hpp"

PresidentialPardonForm::PresidentialPardonForm() : AForm("PresidentialPardonForm", 25, 5), target("default")
{
	std::cout << "PresidentialPardonForm default constructor" << std::endl;
}

PresidentialPardonForm::PresidentialPardonForm(std::string const &target) : AForm("PresidentialPardonForm", 25, 5), target(target)
{
	std::cout << "PresidentialPardonForm parameter constructor" << std::endl;
}

PresidentialPardonForm::PresidentialPardonForm(PresidentialPardonForm const &form) : AForm(form), target(form.target)
{
	std::cout << "PresidentialPardonForm copy constructor" << std::endl;
}

PresidentialPardonForm::~PresidentialPardonForm()
{
	std::cout << "PresidentialPardonForm destructor" << std::endl;
}

PresidentialPardonForm &PresidentialPardonForm::operator=(PresidentialPardonForm const &form)
{
	std::cout << "PresidentialPardonForm assignment operator" << std::endl;
	if (this == &form)
		return (*this);
	AForm::operator=(form);
	this->target = form.target;
	return (*this);
}

std::string const &PresidentialPardonForm::getTarget() const
{
	return (this->target);
}

void PresidentialPardonForm::execute(Bureaucrat const &executor) const
{
	AForm::execute(executor);
	std::cout << this->target << " has been pardoned by Zafod Beeblebrox" << std::endl;
}


#ifndef PRESIDENTIALPARDONFORM_HPP
#define PRESIDENTIALPARDONFORM_HPP

#include <iostream>
#include <stdexcept>
#include "AForm.hpp"
#include "Bureaucrat.hpp"

class Bureaucrat;

class PresidentialPardonForm : public AForm
{
	private:
		std::string target;

	public:
		PresidentialPardonForm();
		PresidentialPardonForm(std::string const &target);
		PresidentialPardonForm(PresidentialPardonForm const &form);
		~PresidentialPardonForm();
		
		PresidentialPardonForm &operator=(PresidentialPardonForm const &form);

		std::string const &getTarget() const;
		void execute(Bureaucrat const &executor) const;
};

std::ostream &operator<<(std::ostream &out, PresidentialPardonForm const &form);

#endif 
#include "RobotomyRequestForm.hpp"
#include <cstdlib>

RobotomyRequestForm::RobotomyRequestForm() : AForm("RobotomyRequestForm", 72, 45), target("default")
{
	std::cout << "RobotomyRequestForm default constructor" << std::endl;
}

RobotomyRequestForm::RobotomyRequestForm(std::string const &target) : AForm("RobotomyRequestForm", 72, 45), target(target)
{
	std::cout << "RobotomyRequestForm parameter constructor" << std::endl;
}

RobotomyRequestForm::RobotomyRequestForm(RobotomyRequestForm const &form) : AForm(form), target(form.target)
{
	std::cout << "RobotomyRequestForm copy constructor" << std::endl;
}

RobotomyRequestForm::~RobotomyRequestForm()
{
	std::cout << "RobotomyRequestForm destructor" << std::endl;
}

RobotomyRequestForm &RobotomyRequestForm::operator=(RobotomyRequestForm const &form)
{
	std::cout << "RobotomyRequestForm assignment operator" << std::endl;
	if (this == &form)
		return (*this);
	AForm::operator=(form);
	this->target = form.target;
	return (*this);
}

std::string const &RobotomyRequestForm::getTarget() const
{
	return (this->target);
}

void RobotomyRequestForm::execute(Bureaucrat const &executor) const
{
	AForm::execute(executor);
	std::cout << "Drilling noises" << std::endl;
	if (rand() % 2)
		std::cout << this->target << " has been robotomized" << std::endl;
	else
		throw RobotomizeException();
}

std::ostream &operator<<(std::ostream &out, RobotomyRequestForm const &form)
{
	out << "Form " << form.getName() << " is ";
	if (form.getFormSigned())
		out << "signed";
	else
		out << "not signed";
	out << " and requires grade " << form.getGradeToSign() << " to sign and grade " << form.getGradeToExecute() << " to execute" << std::endl;
	return (out);
}

#ifndef ROBOTOMYREQUESTFORM_HPP
#define ROBOTOMYREQUESTFORM_HPP

#include <iostream>
#include <stdexcept>
#include "AForm.hpp"
#include "Bureaucrat.hpp"

class Bureaucrat;

class RobotomyRequestForm : public AForm
{
	private:
		std::string target;

	public:
		RobotomyRequestForm();
		RobotomyRequestForm(std::string const &target);
		RobotomyRequestForm(RobotomyRequestForm const &form);
		~RobotomyRequestForm();
		
		RobotomyRequestForm &operator=(RobotomyRequestForm const &form);

		std::string const &getTarget() const;
		void execute(Bureaucrat const &executor) const;

		class RobotomizeException : public std::exception {
		public:
			const char *what() const throw() {
				return "Robotomize failed";
			}
		};
};

#endif










#include "ShrubberyCreationForm.hpp"
#include <fstream>

ShrubberyCreationForm::ShrubberyCreationForm() : AForm("ShrubberyCreationForm", 145, 137), target("default")
{
	std::cout << "ShrubberyCreationForm default constructor" << std::endl;
}

ShrubberyCreationForm::ShrubberyCreationForm(std::string const &target) : AForm("ShrubberyCreationForm", 145, 137), target(target)
{
	std::cout << "ShrubberyCreationForm parameter constructor" << std::endl;
}

ShrubberyCreationForm::ShrubberyCreationForm(ShrubberyCreationForm const &form) : AForm(form), target(form.target)
{
	std::cout << "ShrubberyCreationForm copy constructor" << std::endl;
}

ShrubberyCreationForm::~ShrubberyCreationForm()
{
	std::cout << "ShrubberyCreationForm destructor" << std::endl;
}

ShrubberyCreationForm &ShrubberyCreationForm::operator=(ShrubberyCreationForm const &form)
{
	std::cout << "ShrubberyCreationForm assignment operator" << std::endl;
	if (this == &form)
		return (*this);
	AForm::operator=(form);
	this->target = form.target;
	return (*this);
}

std::string const &ShrubberyCreationForm::getTarget() const
{
	return (this->target);
}

void ShrubberyCreationForm::execute(Bureaucrat const &executor) const
{
	AForm::execute(executor);
	std::string filename = this->target + "_shrubbery";
	std::ofstream file(filename.c_str());
	if (!file.is_open())
		throw ShrubberyCreationForm::FileOpenException();
	file << "      /\\      " << std::endl;
	file << "     /\\*\\     " << std::endl;
	file << "    /\\O\\*\\    " << std::endl;
	file << "   /*/\\/\\/\\   " << std::endl;
	file << "  /\\O\\/\\*\\/\\  " << std::endl;
	file << " /\\*\\/\\*\\/\\/\\ " << std::endl;
	file << "/\\O\\/\\/*/\\/O/\\" << std::endl;
	file << "      ||      " << std::endl;
	file << "      ||      " << std::endl;
	file << "      ||      " << std::endl;
	file << std::endl;
	file.close();
}
#ifndef SHRUBBERYCREATIONFORM_HPP
#define SHRUBBERYCREATIONFORM_HPP

#include "AForm.hpp"

class ShrubberyCreationForm : public AForm
{
	private:
		std::string target;

	public:
		ShrubberyCreationForm();
		ShrubberyCreationForm(std::string const &target);
		ShrubberyCreationForm(ShrubberyCreationForm const &form);
		~ShrubberyCreationForm();
		
		ShrubberyCreationForm &operator=(ShrubberyCreationForm const &form);

		std::string const &getTarget() const;
		void execute(Bureaucrat const &executor) const;

		class FileOpenException : public std::exception {
		public:
			const char *what() const throw() {
				return "File open failed";
			}
		};
};

#endif
